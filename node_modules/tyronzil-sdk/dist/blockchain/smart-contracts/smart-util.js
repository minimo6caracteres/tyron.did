"use strict";
/*
    tyronzil-sdk: Tyron DID SDK - Zilliqa's DID-Method at www.tyronZIL.com
    Copyright (C) 2020 Julio Cesar Cabrapan Duarte

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/** Tools to manage smart contracts */
class SmartUtil {
    /** Gets the value out of a DIDC field Option */
    static getValue(object) {
        return __awaiter(this, void 0, void 0, function* () {
            const ENTRIES = Object.entries(object);
            let VALUE;
            ENTRIES.forEach((value) => {
                if (value[0] === "arguments") {
                    VALUE = value[1];
                }
            });
            return VALUE[0];
        });
    }
    /** Gets the DID-Status out of a DIDC field Option */
    static getStatus(object) {
        return __awaiter(this, void 0, void 0, function* () {
            const ENTRIES = Object.entries(object);
            let VALUE;
            ENTRIES.forEach((value) => {
                if (value[0] === "constructor") {
                    VALUE = value[1];
                }
            });
            return VALUE;
        });
    }
    /** Gets the value out of a map key */
    static getValuefromMap(object, key) {
        return __awaiter(this, void 0, void 0, function* () {
            const ENTRIES = Object.entries(object);
            let VALUE;
            ENTRIES.forEach((value) => {
                if (value[0] === key) {
                    VALUE = value[1];
                }
            });
            return VALUE;
        });
    }
    /** Turns the smart contract's map into a Map */
    static intoMap(object) {
        return __awaiter(this, void 0, void 0, function* () {
            const ENTRIES = Object.entries(object);
            let MAP = new Map();
            ENTRIES.forEach((value) => {
                MAP.set(value[0], value[1]);
            });
            return MAP;
        });
    }
    /** Turns the DIDC `services` map field into a Map */
    static fromServices(object) {
        return __awaiter(this, void 0, void 0, function* () {
            const PREV_MAP = yield this.intoMap(object);
            let MAP = new Map();
            for (let id of PREV_MAP.keys()) {
                const OBJECT = PREV_MAP.get(id);
                const ENTRIES = Object.entries(OBJECT);
                ENTRIES.forEach((value) => {
                    if (value[0] === "arguments") {
                        const VALUE = value[1];
                        const TYPE = VALUE[0];
                        const URI = VALUE[1];
                        MAP.set(id, [TYPE, URI]);
                    }
                });
            }
            ;
            return MAP;
        });
    }
}
exports.default = SmartUtil;
//# sourceMappingURL=smart-util.js.map