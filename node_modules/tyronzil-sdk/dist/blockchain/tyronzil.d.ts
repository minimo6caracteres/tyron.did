/// <reference types="bn.js" />
/// <reference types="long" />
import { Transaction } from '@zilliqa-js/account';
import { Contract } from '@zilliqa-js/contract';
import * as Util from '@zilliqa-js/util';
import ZilliqaInit from './zilliqa-init';
import { NetworkNamespace } from '../decentralized-identity/tyronZIL-schemes/did-scheme';
import { Action, DocumentElement, ServiceModel } from '../decentralized-identity/protocols/models/document-model';
import { PublicKeyModel } from '../decentralized-identity/protocols/models/verification-method-models';
/** The `init.tyron smart contracts */
export declare enum InitTyron {
    Testnet = "0x63e2d8484187de4f66a571c098f3b51a793f055b",
    Mainnet = "0x1c8272a79b5b4920bcae80f310d638c8dd4bd8aa",
    Isolated = "0x9ded7118b3386108f1bc4e0e0699d7ab23997265"
}
/** The tyronZIL transaction class */
export default class TyronZIL extends ZilliqaInit {
    /** The user is the owner of their DIDC */
    readonly contractOwner: string;
    readonly userPrivateKey: string;
    /** The Zilliqa address where the `init.tyron smart-contract` resides */
    readonly initTyron: InitTyron;
    readonly gasPrice: Util.BN;
    readonly gasLimit: Util.Long;
    private constructor();
    /** Retrieves the minimum gas price & validates the account info */
    static initialize(network: NetworkNamespace, initTyron: InitTyron, userPrivateKey: string, gasLimit: number): Promise<TyronZIL>;
    /***            ****            ***/
    /** Deploys the DIDC by version
     * & calls the Init transition with the avatar.agent */
    static deploy(agent: string, input: TyronZIL, contractCode: string): Promise<DeployedContract>;
    /** Submits a tyronZIL transaction */
    static submit(input: TyronZIL, didcAddr: string, tag: TransitionTag, params: TransitionParams[], operation: string): Promise<void>;
    static create(agent: string, document: any[], updateKey: string, recoveryKey: string): Promise<TransitionParams[]>;
    static recover(agent: string, newDocument: any[], docHash: string, signature: string, newUpdateKey: string, newRecoveryKey: string): Promise<TransitionParams[]>;
    static update(agent: string, newDocument: any[], docHash: string, signature: string, newUpdateKey: string): Promise<TransitionParams[]>;
    static deactivate(agent: string, signature: string): Promise<TransitionParams[]>;
    static dns(domain: string, avatar: string): Promise<TransitionParams[]>;
    /** Returns a DID-Document element transition value */
    static documentElement(element: DocumentElement, action: Action, key?: PublicKeyModel, service?: ServiceModel): Promise<TransitionValue>;
    static xTransfer(domain: string, token: string, agent: string, recipient: string, amount: string, signature: string): Promise<TransitionParams[]>;
    static ssiToken(token: string): Promise<TransitionParams[]>;
    static donate(campaign: string): Promise<TransitionParams[]>;
}
/***            ** interfaces **            ***/
/** The result of a DIDC deployment */
export interface DeployedContract {
    transaction: Transaction;
    contract: Contract;
    gas: any;
    initCall: any;
}
export declare enum TransitionTag {
    Create = "DidCreate",
    Update = "DidUpdate",
    Recover = "DidRecover",
    Deactivate = "DidDeactivate",
    Dns = "SetSsiDomain",
    XTranfer = "XTransfer",
    SsiToken = "SsiToken",
    Donate = "Donate"
}
interface TransitionParams {
    vname: string;
    type: any;
    value: unknown;
}
export interface TransitionValue {
    constructor: string;
    argtypes: any[];
    arguments: any[];
}
export {};
